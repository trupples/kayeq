<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sound_8h" kind="file" language="C++">
    <compoundname>sound.h</compoundname>
    <includedby refid="eqmath_8h" local="yes">eqmath.h</includedby>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <invincdepgraph>
      <node id="26">
        <label>eqmath.h</label>
        <link refid="eqmath_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sound.h</label>
        <link refid="sound_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structsound" prot="public">sound</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__sound_1ga538e0cad3acb787a49e16b1e53787610" prot="public" static="no">
        <name>SAMPLERATE</name>
        <initializer>48000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sample rate to be used for processing sounds. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="22" column="9" bodyfile="sound.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__sound_1ga4306e691f14ab44b79bb62d91d5f352b" prot="public" static="no">
        <type>struct <ref refid="structsound" kindref="compound">sound</ref></type>
        <definition>typedef struct sound  sound</definition>
        <argsstring></argsstring>
        <name>sound</name>
        <briefdescription>
<para>Container for a variable length one-channel signal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="29" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__sound_1gae81a70bb5e777be8be808219d1edf560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sound_init</definition>
        <argsstring>(sound *snd, int num_samples)</argsstring>
        <name>sound_init</name>
        <param>
          <type><ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>snd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_samples</declname>
        </param>
        <briefdescription>
<para>Initialises a silent sound of the given length, deallocating previous data, if any exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">snd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sound object to initialise </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples of silence to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sound_1ga7a2a41945f7658be93e272b52eb2b34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sound_copyinit</definition>
        <argsstring>(sound *dst, const sound *src)</argsstring>
        <name>sound_copyinit</name>
        <param>
          <type><ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy-initialises a sound with data from another sound, deallocating previous data, if it exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sound object to initialise </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sound object to be copied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sound_1ga90c97182338426787d2927f03b406bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sound_delete</definition>
        <argsstring>(sound *snd)</argsstring>
        <name>sound_delete</name>
        <param>
          <type><ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>snd</declname>
        </param>
        <briefdescription>
<para>Deallocates a sound object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">snd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sound object to deallocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sound_1ga8cbd5d359fdafc96c1812b101985bcb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sound_resample</definition>
        <argsstring>(sound *dst, const sound *src, int src_sample_rate)</argsstring>
        <name>sound_resample</name>
        <param>
          <type><ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_sample_rate</declname>
        </param>
        <briefdescription>
<para>Converts a sound with a given sample rate to a sound with the constant SAMPLERATE sample rate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sound object to be initialised with the resampled data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sound object to be converted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_sample_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample rate to convert from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sound_1ga9e30d6558a58459b8783a6e84a2ba219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sound_load</definition>
        <argsstring>(sound *snd, const char *filename)</argsstring>
        <name>sound_load</name>
        <param>
          <type><ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>snd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Initialise sound with data from WAV file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">snd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sound to be initialised. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to WAV file to read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sound_1ga8b0a5aa3a6ddcdf5c9becbbfcefdbf21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sound_save</definition>
        <argsstring>(const sound *snd, const char *filename)</argsstring>
        <name>sound_save</name>
        <param>
          <type>const <ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>snd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Store sound to disk as a 16-bit WAV file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">snd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sound to store to disk. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to WAV file to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sound_1ga24ccdd09a9e5917d65aec35a9625126e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sound_play</definition>
        <argsstring>(const sound *snd)</argsstring>
        <name>sound_play</name>
        <param>
          <type>const <ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>snd</declname>
        </param>
        <briefdescription>
<para>Play a sound to the default audio output device. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>While this was part of the initial planned functionality, it turns out to be shit with simple code.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">snd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sound to play. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sound.h" line="83" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="19"><highlight class="preprocessor">#ifndef<sp/>INCLUDED_SOUND_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_SOUND_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="group__sound_1ga538e0cad3acb787a49e16b1e53787610" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SAMPLERATE<sp/>48000<sp/></highlight></codeline>
<codeline lineno="26" refid="structsound" refkind="compound"><highlight class="preprocessor">typedef<sp/>struct<sp/>sound<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_samples;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*samples;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}<sp/><ref refid="group__sound_1ga4306e691f14ab44b79bb62d91d5f352b" kindref="member">sound</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__sound_1gae81a70bb5e777be8be808219d1edf560" kindref="member">sound_init</ref>(<ref refid="structsound" kindref="compound">sound</ref><sp/>*snd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_samples);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__sound_1ga7a2a41945f7658be93e272b52eb2b34e" kindref="member">sound_copyinit</ref>(<ref refid="structsound" kindref="compound">sound</ref><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsound" kindref="compound">sound</ref><sp/>*src);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__sound_1ga90c97182338426787d2927f03b406bfd" kindref="member">sound_delete</ref>(<ref refid="structsound" kindref="compound">sound</ref><sp/>*snd);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__sound_1ga8cbd5d359fdafc96c1812b101985bcb2" kindref="member">sound_resample</ref>(<ref refid="structsound" kindref="compound">sound</ref><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsound" kindref="compound">sound</ref><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_sample_rate);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__sound_1ga9e30d6558a58459b8783a6e84a2ba219" kindref="member">sound_load</ref>(<ref refid="structsound" kindref="compound">sound</ref><sp/>*snd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__sound_1ga8b0a5aa3a6ddcdf5c9becbbfcefdbf21" kindref="member">sound_save</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsound" kindref="compound">sound</ref><sp/>*snd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__sound_1ga24ccdd09a9e5917d65aec35a9625126e" kindref="member">sound_play</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsound" kindref="compound">sound</ref><sp/>*snd);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor">#endif<sp/>//<sp/>INCLUDED_SOUND_H</highlight></codeline>
    </programlisting>
    <location file="sound.h"/>
  </compounddef>
</doxygen>
