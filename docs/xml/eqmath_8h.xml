<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="eqmath_8h" kind="file" language="C++">
    <compoundname>eqmath.h</compoundname>
    <includes refid="eq_8h" local="yes">eq.h</includes>
    <includes refid="sound_8h" local="yes">sound.h</includes>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <incdepgraph>
      <node id="8">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>eq.h</label>
        <link refid="eq_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>eqmath.h</label>
        <link refid="eqmath_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sound.h</label>
        <link refid="sound_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10">
        <label>eqmath.h</label>
        <link refid="eqmath_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbiquad" prot="public">biquad</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__eqmath_1ga4873bc708dea9b234e96f52c944db500" prot="public" static="no">
        <type>struct <ref refid="structbiquad" kindref="compound">biquad</ref></type>
        <definition>typedef struct biquad  biquad</definition>
        <argsstring></argsstring>
        <name>biquad</name>
        <briefdescription>
<para>Biquadratic filter represented by its direct form 1 coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="33" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__eqmath_1gab4352db37c5c0b1c8baf3de0b93bb2ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eqmath_init</definition>
        <argsstring>(equalizer *eq)</argsstring>
        <name>eqmath_init</name>
        <param>
          <type><ref refid="structequalizer" kindref="compound">equalizer</ref> *</type>
          <declname>eq</declname>
        </param>
        <briefdescription>
<para>Precompute expensive values needed for computing frequency responses each frame. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">eq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initialised equalizer to get a frequency list from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eqmath_1ga9eb597f9e5a3ccc342c1b6ad0aae4c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double eqmath_gain_to_db</definition>
        <argsstring>(double gain)</argsstring>
        <name>eqmath_gain_to_db</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Convert a linear amplitude gain to decibels. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gain</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eqmath_1ga068741466cda031d003cca65d85acc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double eqmath_db_to_gain</definition>
        <argsstring>(double db)</argsstring>
        <name>eqmath_db_to_gain</name>
        <param>
          <type>double</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>Convert a decibel value to a linear amplitude gain. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">db</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eqmath_1gadd5c7f6a64a6b1561ce591f2f398c831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eqmath_one_frequency_response</definition>
        <argsstring>(const equalizer *eq, double gain[NFREQ], int cursor)</argsstring>
        <name>eqmath_one_frequency_response</name>
        <param>
          <type>const <ref refid="structequalizer" kindref="compound">equalizer</ref> *</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gain</declname>
          <array>[NFREQ]</array>
        </param>
        <param>
          <type>int</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
<para>Compute the frequency response of a given filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">eq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to equalizer object to get a frequency list and filter parameters from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of doubles to receive the filter&apos;s frequency response as linear gains. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the filter to analyse. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eqmath_1gaa06c1eb722415116ee73ade066a4e9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eqmath_overall_frequency_response</definition>
        <argsstring>(const equalizer *eq, double gain[NFREQ])</argsstring>
        <name>eqmath_overall_frequency_response</name>
        <param>
          <type>const <ref refid="structequalizer" kindref="compound">equalizer</ref> *</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gain</declname>
          <array>[NFREQ]</array>
        </param>
        <briefdescription>
<para>Compute the frequency response of all filters applied in series. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">eq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to equalizer object to get a frequency list and filter parameters from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of doubles to receive the equalizer&apos;s frequency response as linear gains. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eqmath_1gad3e99e670c2245d7a80a77811e03616d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eqmath_biquad_prepare_peakingeq</definition>
        <argsstring>(biquad *filter, const equalizer *eq, int freq_idx)</argsstring>
        <name>eqmath_biquad_prepare_peakingeq</name>
        <param>
          <type><ref refid="structbiquad" kindref="compound">biquad</ref> *</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>const <ref refid="structequalizer" kindref="compound">equalizer</ref> *</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>freq_idx</declname>
        </param>
        <briefdescription>
<para>Initialise a biquad filter in a Peaking-EQ configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to biquad struct to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">eq</parametername>
</parameternamelist>
<parameterdescription>
<para>Equalizer to get filter parameters from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of selected filter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eqmath_1ga7107ef9253df65055eaf450df0dd35fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eqmath_biquad_apply</definition>
        <argsstring>(const biquad *filter, const sound *in, sound *out)</argsstring>
        <name>eqmath_biquad_apply</name>
        <param>
          <type>const <ref refid="structbiquad" kindref="compound">biquad</ref> *</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>const <ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Apply a biquad filter to an input signal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to biquad filter to apply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input signal. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a sound to be initialised with the output of the filter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eqmath_1ga44ae20fad67f0ebe074ff9873abc9c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eqmath_process</definition>
        <argsstring>(const equalizer *eq, const sound *in, sound *out, void(*progress_callback)(double))</argsstring>
        <name>eqmath_process</name>
        <param>
          <type>const <ref refid="structequalizer" kindref="compound">equalizer</ref> *</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>const <ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="structsound" kindref="compound">sound</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>void(*)(double)</type>
          <declname>progress_callback</declname>
        </param>
        <briefdescription>
<para>Apply all filters of an equalizer in series to an input signal. Since this is relatively slow, a progress callback function is specified, which can be used to notify the user of the processing progress. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">eq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to equalizer to use for processing the signal. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to input signal. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a sound to be initialised with the resulting signal. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">progress_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>double-&gt;void function which is called after each intermediate step with a value in [0.0; 1.0] representing current progress. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="eqmath.h" line="98" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="24"><highlight class="preprocessor">#ifndef<sp/>INCLUDED_EQMATH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_EQMATH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="eq_8h" kindref="compound">eq.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equalizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sound_8h" kindref="compound">sound.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>sound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structbiquad" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbiquad" kindref="compound">biquad</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a0,<sp/>a1,<sp/>a2,<sp/>b0,<sp/>b1,<sp/>b2;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/><ref refid="group__eqmath_1ga4873bc708dea9b234e96f52c944db500" kindref="member">biquad</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__eqmath_1gab4352db37c5c0b1c8baf3de0b93bb2ba" kindref="member">eqmath_init</ref>(<ref refid="structequalizer" kindref="compound">equalizer</ref><sp/>*eq);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__eqmath_1ga9eb597f9e5a3ccc342c1b6ad0aae4c25" kindref="member">eqmath_gain_to_db</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gain);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__eqmath_1ga068741466cda031d003cca65d85acc7e" kindref="member">eqmath_db_to_gain</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>db);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__eqmath_1gadd5c7f6a64a6b1561ce591f2f398c831" kindref="member">eqmath_one_frequency_response</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structequalizer" kindref="compound">equalizer</ref><sp/>*eq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gain[<ref refid="group__eq_1ga81a10fb168899efe1d3f89bed47d44b9" kindref="member">NFREQ</ref>],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cursor);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__eqmath_1gaa06c1eb722415116ee73ade066a4e9a2" kindref="member">eqmath_overall_frequency_response</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structequalizer" kindref="compound">equalizer</ref><sp/>*eq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gain[<ref refid="group__eq_1ga81a10fb168899efe1d3f89bed47d44b9" kindref="member">NFREQ</ref>]);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__eqmath_1gad3e99e670c2245d7a80a77811e03616d" kindref="member">eqmath_biquad_prepare_peakingeq</ref>(<ref refid="structbiquad" kindref="compound">biquad</ref><sp/>*filter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structequalizer" kindref="compound">equalizer</ref><sp/>*eq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq_idx);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__eqmath_1ga7107ef9253df65055eaf450df0dd35fd" kindref="member">eqmath_biquad_apply</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbiquad" kindref="compound">biquad</ref><sp/>*filter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsound" kindref="compound">sound</ref><sp/>*in,<sp/><ref refid="structsound" kindref="compound">sound</ref><sp/>*out);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__eqmath_1ga44ae20fad67f0ebe074ff9873abc9c82" kindref="member">eqmath_process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structequalizer" kindref="compound">equalizer</ref><sp/>*eq,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsound" kindref="compound">sound</ref><sp/>*in,<sp/><ref refid="structsound" kindref="compound">sound</ref><sp/>*out,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="main_8c_1acd9638ea68a8e44751e72ae7bec8edc0" kindref="member">progress_callback</ref>)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor">#endif<sp/>//<sp/>INCLUDED_EQMATH_H</highlight></codeline>
    </programlisting>
    <location file="eqmath.h"/>
  </compounddef>
</doxygen>
